#! /bin/sh

grep_port () {
    echo "Activiating ports:"
    grep -A10 $1 docker-compose.yml | grep -A2 ports | grep "-"
}

setup () {
    # Verify the directories and files that are not uplaoded to the github are there. 
    # This function also creates the two files that are ignored but needed. 
    # This is a good thing to run after cloaning a new github branch. 

    echo "Setting up directories and files that may not be in the github. "

    if [ ! -d db ]; then
        echo "making db/ dir"
        mkdir db; fi

    if [ ! -d logs/behave/old ]; then
        echo "making logs/behave/old/ dir"
        mkdir logs/behave/old; fi

    if [ ! -d logs/archive ]; then
        echo "making logs/archive/ dir"
        mkdir logs/archive; fi

    echo "Done!"
}

clean () {
    # Move log files to the logs/archive directory to work with a clean log file. 
    # When the log file is moved a prefix of the date is added. 

    echo "Archiving log files from the logs/ dir"
    
    move_file () {
        if [ -f ${1}${2} ]; then
            echo "Archiving log file ${1}${2} to ${3}${4}${2}"
            mv ${1}${2} ${3}${4}${2};
        fi

    }
    DATE=$(date '+%Y%m%d%H%M%S')
    move_file "logs/" "frontend.log" "logs/archive/" "${DATE}_"
    move_file "logs/" "frontend_startup.log" "logs/archive/" "${DATE}_"
    move_file "logs/" "frontend_dev.log" "logs/archive/" "${DATE}_"
    move_file "logs/" "backend.log" "logs/archive/" "${DATE}_"
    move_file "logs/" "backend_startup.log" "logs/archive/" "${DATE}_"
    move_file "logs/" "backend_dev.log" "logs/archive/" "${DATE}_"

    echo "Done!"
}

run () {
    # Use docker-compose to spin up the app. 
    echo "frontend"
    grep_port "frontend"
    echo "backend"
    grep_port "backend"
    docker-compose up -d frontend
    docker-compose up -d backend
}

dev_fe () {
    # Spin up the dev environment. 
    grep_port "dev-fe"
    docker-compose up dev-fe
}

dev_be () {
    # Spin up the dev environment. 
    grep_port "dev-be"
    docker-compose up dev-be
}

stop () {
    # Stop weatherman containers

    echo "Stopping all weatherman containers"

    docker ps --filter name=civ* -aq | xargs docker stop
}

clense () {
    # Find all containers that have weatherman* in the name and stop/rm them. 

    echo "About to stop/rm all weatherman containers. If one is running in terminal this cmd will wait"

    docker ps --filter name=civ* -aq | xargs docker stop | xargs docker rm
}


unit () {
    # Run the unit tests. 
    # This includes flake and lenting
    docker-compose up unit-test
}

functional () {
    # Run the functional tests. 
    docker-compose up test
}

tests () {
    # Run each test. 
    # I have them seporated in case i want to grep for things in the test or save them to files. 
    unit
    functional
}

about () {
    echo "

    
    setup               - Set up dir and files (run if its a new cloan)
    clean               - Move log files to the logs/archive directory
    run                 - Run the container
    dev-fe              - Run a frontend dev instance
    dev-be              - Run a backend dev instance
    clean-run           - Clean then run
    clean_fe            - Clean then dev
    clean_be            - Clean then dev
    stop                - Stop weatherman containers
    clense-containers   - Stop/rm weatherman containers
    unit                - Unit tests
    functional          - Functional tests
    tests               - Unit then Functional
    help                - Uhhh speaking...
    "
}

case "$1" in
    # Setup
    setup)
        setup
        ;;

    clean)
        clean
        ;;

    # Running
    run)
        run
        ;;
    dev-fe)
        dev_fe
        ;;
    dev-be)
        dev_be
        ;;
    clean-run)
        clean
        run
        ;;
    clean-fe)
        clean
        dev-fe
        ;;
    clean-be)
        clean
        dev-be
        ;;

    # Stopping
    stop)
        stop
        ;;
    clense-containers)
        clense
        ;;

    # Testing
    unit)
        unit
        ;;
    functional)
        functional
        ;;
    tests)
        tests
        ;;

    # Help
    help)
        about
        ;;
esac
