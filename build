#! /bin/sh

APPNAME='civ_vi'

grep_port () {
    # Echo the main port the current container is open to
    echo "Activiating ports:"
    grep -A10 $1 docker-compose.yml | grep -A4 ports | grep "-" | head -n1
}

setup () {
    # Run setup from the cmd line. Not reccomended as its super clunkey
    ./setup.py
}

start_container () {
    COMPOSE_EXIT_CODE=2
    echo $1 # env (prod, reg, dev, test)
    echo $2 # Service
    echo $3
    echo $@

    case "$1" in
        # prod
        prod)
            echo "Spinning up the prod env for ${APPNAME} program"
            docker-compose -d up
            COMPOSE_EXIT_CODE=$?
            ;;
        reg)
            echo "Spinning up the reg env for ${APPNAME} program"
            docker-compose -d -f docker-compose-regression.yml up
            COMPOSE_EXIT_CODE=$?
            ;;
        dev)
            echo "Spinning up a dev env for ${APPNAME} program"
            docker-compose -f docker-compose-development.yml run --rm $2
            COMPOSE_EXIT_CODE=$?
            ;;
        test)
            echo "Spinning up the test env ${APPNAME} program"
            echo $2
            if [ -z $2 ];then
                echo run all
                docker-compose -f docker-compose-test.yml up
            else
                docker-compose -f docker-compose-test.yml up --rm $2
                # docker-compose -f docker-compose-test.yml up
            fi
            COMPOSE_EXIT_CODE=$?
            
            ;;
    esac
}

clean () {
    echo clean
}

stop () {
    echo stop
}

clense () {
    echo clense
}

about () {
    echo "

    
    setup               - Set up dir and files (run if its a new cloan)
    clean               - Move log files to the logs/archive directory
    run                 - Run the container
    dev-fe              - Run a frontend dev instance
    dev-be              - Run a backend dev instance
    clean-run           - Clean then run
    clean_fe            - Clean then dev
    clean_be            - Clean then dev
    stop                - Stop weatherman containers
    clense-containers   - Stop/rm weatherman containers
    unit                - Unit tests
    functional          - Functional tests
    tests               - Unit then Functional
    help                - Uhhh speaking...
    "
}

case "$1" in
    # Setup
    setup)
        setup
        ;;

    clean)
        clean
        ;;

    # Running
    prod)
        start_container "prod"
        ;;

    reg)
        start_container "reg" "${2}"
        ;;

    dev)
        start_container "dev" "${2}"
        ;;

    test)
        start_container "test" "${2}"
        ;;


    # Stopping
    stop)
        stop
        ;;

    clense-containers)
        clense
        ;;

    # Help
    help)
        about
        ;;
esac
