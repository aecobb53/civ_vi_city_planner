#! /bin/sh

APPNAME='civ_vi'

grep_port () {
    # Echo the main port the current container is open to
    echo "Activiating ports:"
    grep -A10 $1 docker-compose.yml | grep -A4 ports | grep "-" | head -n1
}

setup () {
    # Run setup from the cmd line. Not reccomended as its super clunkey
    ./setup.py
}

start_container () {
    COMPOSE_EXIT_CODE=2
    # echo $1 # env (prod, reg, dev, test)
    # echo $2 # Service
    # echo $3
    # echo $@

    case "$1" in
        # prod
        prod)
            echo "Spinning up the prod env for ${APPNAME} program"
            docker-compose -d up
            COMPOSE_EXIT_CODE=$?
            ;;
        reg)
            echo "Spinning up the reg env for ${APPNAME} program"
            docker-compose -d -f docker-compose-regression.yml up
            COMPOSE_EXIT_CODE=$?
            ;;
        dev)
            echo "Spinning up a ${service} service in a DEV env for ${APPNAME} program"
            docker-compose -f docker-compose-development.yml run --rm $2
            COMPOSE_EXIT_CODE=$?
            ;;
        test)
            echo "Spinning up the test env ${APPNAME} program"
            docker-compose -f docker-compose-test.yml up
            COMPOSE_EXIT_CODE=$?
            ;;
    esac
}

clean () {
    echo clean
    # # Move log files to the logs/archive directory to work with a clean log file. 
    # # When the log file is moved a prefix of the date is added. 

    # echo "Archiving log files from the logs/ dir"
    
    # move_file () {
    #     if [ -f ${1}${2} ]; then
    #         echo "Archiving log file ${1}${2} to ${3}${4}${2}"
    #         mv ${1}${2} ${3}${4}${2};
    #     fi

    # }
    # DATE=$(date '+%Y%m%d%H%M%S')
    # move_file "logs/" "frontend.log" "logs/archive/" "${DATE}_"
    # move_file "logs/" "frontend_startup.log" "logs/archive/" "${DATE}_"
    # move_file "logs/" "frontend_dev.log" "logs/archive/" "${DATE}_"
    # move_file "logs/" "backend.log" "logs/archive/" "${DATE}_"
    # move_file "logs/" "backend_startup.log" "logs/archive/" "${DATE}_"
    # move_file "logs/" "backend_dev.log" "logs/archive/" "${DATE}_"

    # echo "Done!"
}

run () {
    echo run
    # # Use docker-compose to spin up the app. 
    # echo "frontend"
    # grep_port "frontend"
    # echo "backend"
    # grep_port "backend"
    # docker-compose up -d frontend
    # docker-compose up -d backend
}

# dev_fe () {
#     # Spin up the dev environment. 
#     grep_port "dev-fe"
#     docker-compose up dev-fe
# }

# dev_be () {
#     # Spin up the dev environment. 
#     grep_port "dev-be"
#     docker-compose up dev-be
# }

containers () {
    echo containers
    # # List containers matching name

    # echo "\nList of containers"

    # echo "-${0}-${1}-${2}-"
    # if [ -z $2 ]
    # then
    #     echo '\nActive containers'
    #     docker ps --filter label=project="Civ-VI"
    #     # docker ps
    # else
    #     echo "\nSearching for ${2}"
    #     docker ps --filter "name=${2}"
    #     # docker ps -a --filter label=project="Civ-VI"
    # fi

    # # docker ps --filter name=civ* -aq
}

stop () {
    echo stop
    # # Stop weatherman containers

    # echo "Stopping all weatherman containers"

    # docker ps --filter name=civ* -aq | xargs docker stop
}

clense () {
    echo clense
    # # Find all containers that have weatherman* in the name and stop/rm them. 

    # echo "About to stop/rm all weatherman containers. If one is running in terminal this cmd will wait"

    # docker ps --filter name=civ* -aq | xargs docker stop | xargs docker rm
}


unit () {
    echo unit
    # # Run the unit tests. 
    # # This includes flake and lenting
    # docker-compose up unit-test
}

functional () {
    echo functional
    # # Run the functional tests. 
    # docker-compose up test
}

tests () {
    echo tests
    # # Run each test. 
    # # I have them seporated in case i want to grep for things in the test or save them to files. 
    # unit
    # functional
}

about () {
    echo "

    
    setup               - Set up dir and files (run if its a new cloan)
    clean               - Move log files to the logs/archive directory
    run                 - Run the container
    dev-fe              - Run a frontend dev instance
    dev-be              - Run a backend dev instance
    clean-run           - Clean then run
    clean_fe            - Clean then dev
    clean_be            - Clean then dev
    stop                - Stop weatherman containers
    clense-containers   - Stop/rm weatherman containers
    unit                - Unit tests
    functional          - Functional tests
    tests               - Unit then Functional
    help                - Uhhh speaking...
    "
}

case "$1" in
    # Setup
    setup)
        setup
        ;;

    clean)
        clean
        ;;

    # Running
    prod)
        start_container "prod"
        ;;

    reg)
        start_container "reg" "${2}"
        ;;

    dev)
        start_container "dev" "${2}"
        ;;

    test)
        start_container "test"
        ;;

    
    # run)
    #     run
    #     ;;
    # dev-fe)
    #     dev_fe
    #     ;;
    # dev-be)
    #     dev_be
    #     ;;
    # clean-run)
    #     clean
    #     run
    #     ;;
    # clean-fe)
    #     clean
    #     dev-fe
    #     ;;
    # clean-be)
    #     clean
    #     dev-be
    #     ;;

    # Status
    containers)
        containers $@
        # if [ -z $2 ]
        # then
        #     echo 'onev'
        #     containers 'project=Civ-VI'
        # else
        #     echo 'two'
        #     containers
        # fi
        ;;  

    # Stopping
    stop)
        stop
        ;;
    clense-containers)
        clense
        ;;

    # Testing
    unit)
        unit
        ;;
    functional)
        functional
        ;;
    tests)
        tests
        ;;

    # Help
    help)
        about
        ;;
esac
