#! /bin/sh

APPNAME='civ_vi'

grep_port () {
    # Echo the main port the current container is open to
    echo "Activiating ports:"
    grep -A10 $1 docker-compose.yml | grep -A4 ports | grep "-" | head -n1
}

create_directory () {
    if [ ! -d $1 ]
    then
        echo Creating "${1}" directory
        mkdir $1
    fi
}

setup () {
    # Run setup from the cmd line. Not reccomended as its super clunkey
    # ./setup.py
    create_directory "logs"
    create_directory "logs/backend"
    create_directory "logs/backend/behave"
    create_directory "db"
    create_directory "mongodata"
}

mongodb () {

    cmd="docker-compose -f docker-compose-development.yml up database"
    echo "command: ${cmd}"
    docker-compose -f docker-compose-development.yml -p mongodb-dev up database
    echo "command: ${cmd}"

    exit

    MONGODB_DIR='/mongodata'
    MONGODB_PORT=8305

    echo "DIR ${MONGODB_DIR}"
    echo "PORT ${MONGODB_PORT}"
    echo "extention ${1}"

    # cmd="${MONGODB_DIR} ${MONGODB_PORT} ${1}"
    cmd="docker run -it -v ${MONGODB_DIR}:/data/db -p ${MONGODB_PORT}:27017 --name mongodb-${1} -d mongo"
    # cmd="docker run mongodata:${MONGODB_DIR} -p ${MONGODB_PORT}:8000 --name mongodb-${1} -d mongo"
    echo "cmd: ${cmd}"
    cmd
    echo "cmd: ${cmd}"

    exit
    # sudo docker pull mongo
    MONGODB_DIR='/mongodata'
    MONGODB_PORT=8000
    # sudo docker run -it -v mongodata:/data/db --name mongodb -d mongo 
    # sudo docker run -it -v mongodata:/data/db -p 27017:27017 --name mongodb -d mongo
    # sudo docker logs mongodb
    # sudo docker exec -it mongodb bash
    # mongo # In the container
    # mongo -host localhost -port 27017

    sudo docker run mongodata:${MONGODB_DIR} -p 8305:${MONGODB_PORT} --name mongodb-${1} -d mongo
    sudo docker run mongodata:/mongodata -p 8305:8000 --name mongodb-dev -d mongo
    sudo docker exec -it mongodb bash
    mongo -host localhost -port 27017
    # docker run -v mongodata:/mongodata -p 8503:8000 --name mongodb-dev -d mongo

}

start_container () {
    COMPOSE_EXIT_CODE=2
    # echo $1 # env (prod, reg, dev, test)
    # echo $2 # Service
    # echo $3
    # echo $@

    case "$1" in
        # prod
        prod)
            echo "Spinning up the prod env for ${APPNAME} program"
            docker-compose -d up
            COMPOSE_EXIT_CODE=$?
            ;;

        reg)
            echo "Spinning up the reg env for ${APPNAME} program"
            docker rm $(docker stop $(docker ps -a --filter="name=civ_vi_reg_backend" --format="{{.ID}}"))
            docker-compose -f docker-compose-regression.yml up -d
            COMPOSE_EXIT_CODE=$?
            ;;

        dev)
            echo "Spinning up a dev env for ${APPNAME} program"
            docker-compose -f docker-compose-development.yml up $2
            # docker-compose -f docker-compose-development.yml run --rm $2
            COMPOSE_EXIT_CODE=$?
            ;;

        test)
            echo "Spinning up the test env ${APPNAME} program"
            echo $2
            if [ -z $2 ];then
                echo run all tests
                # docker-compose -f docker-compose-test.yml up
                docker-compose -f docker-compose-test.yml run --rm lint
                LINT_TEMP_ERROR_CODE=$?

                docker-compose -f docker-compose-test.yml run --rm unit
                UNIT_TEMP_ERROR_CODE=$?

                docker-compose -f docker-compose-test.yml run --rm functional
                FUNCTIONAL_TEMP_ERROR_CODE=$?

                docker-compose -f docker-compose-test.yml run --rm coverage
                COVERAGE_TEMP_ERROR_CODE=$?
                
                COMPOSE_EXIT_CODE=0
                if [ $LINT_TEMP_ERROR_CODE -ne 0 ]; then
                    echo 'lint tests failed'
                    COMPOSE_EXIT_CODE=1; fi

                if [ $UNIT_TEMP_ERROR_CODE -ne 0 ]; then
                    echo 'unit tests failed'
                    COMPOSE_EXIT_CODE=1; fi

                if [ $FUNCTIONAL_TEMP_ERROR_CODE -ne 0 ]; then
                    echo 'functional tests failed'
                    COMPOSE_EXIT_CODE=1; fi

                if [ $COVERAGE_TEMP_ERROR_CODE -ne 0 ]; then
                    echo 'coverage tests failed'
                    COMPOSE_EXIT_CODE=1; fi

                if [ $COMPOSE_EXIT_CODE -ne 0 ]; then
                    echo 'At least one test failed. sad day'
                else
                    echo 'All tests succeeded!'
                fi

            else
                docker-compose -f docker-compose-test.yml run --rm $2
                COMPOSE_EXIT_CODE=$?
            fi
            ;;

        coverage)
            echo "Generating coverage report"
            docker-compose -f docker-compose-test.yml run --rm coverage
            COMPOSE_EXIT_CODE=$?
            ;;
    esac
}

clean () {
    echo clean
    docker rm $(docker stop $(docker ps -a --filter="name=civ_vi_city_planner" --format="{{.ID}}"))
}

stop () {
    echo stop
    docker stop $(docker ps -a --filter="name=civ_vi_city_planner" --format="{{.ID}}")
}

clense () {
    echo clense
}

about () {
    echo "

    
    setup               - Set up dir and files (run if its a new cloan)
    clean               - Move log files to the logs/archive directory
    run                 - Run the container
    dev-fe              - Run a frontend dev instance
    dev-be              - Run a backend dev instance
    clean-run           - Clean then run
    clean_fe            - Clean then dev
    clean_be            - Clean then dev
    stop                - Stop weatherman containers
    clense-containers   - Stop/rm weatherman containers
    unit                - Unit tests
    functional          - Functional tests
    tests               - Unit then Functional
    help                - Uhhh speaking...
    "
}

case "$1" in
    # Setup
    setup)
        setup
        ;;

    clean)
        clean
        ;;

    # Running
    prod)
        start_container "prod"
        ;;

    reg)
        start_container "reg" "${2}"
        ;;

    dev)
        start_container "dev" "${2}"
        ;;

    test)
        start_container "test" "${2}"
        ;;

    coverage)
        start_container "coverage" "${2}"
        ;;

    mongodb)
        mongodb "dev"
        ;;


    # Stopping
    stop)
        stop
        ;;

    clense-containers)
        clense
        ;;

    # Help
    help)
        about
        ;;
esac
