// tslint:disable
/**
 * Civ VI City Planner
 * Optomize your civ vi city plans
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Aerodome
 */
export interface Aerodome extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof Aerodome
     */
    buildings?: Array<AerodomeBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum AerodomeBuildingsEnum {
    Hanger = 'hanger'
}

/**
 * 
 * @export
 * @interface AerodomeAllOf
 */
export interface AerodomeAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof AerodomeAllOf
     */
    buildings?: Array<AerodomeAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum AerodomeAllOfBuildingsEnum {
    Hanger = 'hanger'
}

/**
 * 
 * @export
 * @interface Aqueduct
 */
export interface Aqueduct extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof Aqueduct
     */
    buildings?: Array<string>;
}
/**
 * 
 * @export
 * @interface AqueductAllOf
 */
export interface AqueductAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof AqueductAllOf
     */
    buildings?: Array<string>;
}
/**
 * 
 * @export
 * @interface Campus
 */
export interface Campus extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof Campus
     */
    buildings?: Array<CampusBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum CampusBuildingsEnum {
    Library = 'library',
    University = 'university',
    ResearchLab = 'research_lab'
}

/**
 * 
 * @export
 * @interface CampusAllOf
 */
export interface CampusAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof CampusAllOf
     */
    buildings?: Array<CampusAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum CampusAllOfBuildingsEnum {
    Library = 'library',
    University = 'university',
    ResearchLab = 'research_lab'
}

/**
 * 
 * @export
 * @interface Canal
 */
export interface Canal extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof Canal
     */
    buildings?: Array<string>;
}
/**
 * 
 * @export
 * @interface City
 */
export interface City {
    /**
     * 
     * @type {string}
     * @memberof City
     */
    name?: string;
    /**
     * 
     * @type {CityTiles}
     * @memberof City
     */
    tiles?: CityTiles;
}
/**
 * 
 * @export
 * @interface CityCenter
 */
export interface CityCenter extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof CityCenter
     */
    buildings?: Array<CityCenterBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum CityCenterBuildingsEnum {
    Granary = 'granary',
    Monument = 'monument',
    WaterMill = 'water_mill',
    Sewer = 'sewer'
}

/**
 * 
 * @export
 * @interface CityCenterAllOf
 */
export interface CityCenterAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof CityCenterAllOf
     */
    buildings?: Array<CityCenterAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum CityCenterAllOfBuildingsEnum {
    Granary = 'granary',
    Monument = 'monument',
    WaterMill = 'water_mill',
    Sewer = 'sewer'
}

/**
 * 
 * @export
 * @interface CityTiles
 */
export interface CityTiles {
    /**
     * 
     * @type {Array<Tile>}
     * @memberof CityTiles
     */
    center?: Array<Tile>;
    /**
     * 
     * @type {Array<Tile>}
     * @memberof CityTiles
     */
    inner?: Array<Tile>;
    /**
     * 
     * @type {Array<Tile>}
     * @memberof CityTiles
     */
    middle?: Array<Tile>;
    /**
     * 
     * @type {Array<Tile>}
     * @memberof CityTiles
     */
    outer?: Array<Tile>;
    /**
     * 
     * @type {Array<Tile>}
     * @memberof CityTiles
     */
    nearby?: Array<Tile>;
}
/**
 * 
 * @export
 * @interface CommercialHub
 */
export interface CommercialHub extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof CommercialHub
     */
    buildings?: Array<CommercialHubBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum CommercialHubBuildingsEnum {
    Market = 'market',
    Bank = 'bank',
    StockExchange = 'stock_exchange'
}

/**
 * 
 * @export
 * @interface CommercialHubAllOf
 */
export interface CommercialHubAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof CommercialHubAllOf
     */
    buildings?: Array<CommercialHubAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum CommercialHubAllOfBuildingsEnum {
    Market = 'market',
    Bank = 'bank',
    StockExchange = 'stock_exchange'
}

/**
 * 
 * @export
 * @interface Dam
 */
export interface Dam extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof Dam
     */
    buildings?: Array<DamBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum DamBuildingsEnum {
    HydroelectricDam = 'hydroelectric_dam'
}

/**
 * 
 * @export
 * @interface DamAllOf
 */
export interface DamAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof DamAllOf
     */
    buildings?: Array<DamAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum DamAllOfBuildingsEnum {
    HydroelectricDam = 'hydroelectric_dam'
}

/**
 * 
 * @export
 * @interface DiplomaticQuarter
 */
export interface DiplomaticQuarter extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof DiplomaticQuarter
     */
    buildings?: Array<DiplomaticQuarterBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum DiplomaticQuarterBuildingsEnum {
    Consulate = 'consulate',
    Chancery = 'chancery'
}

/**
 * 
 * @export
 * @interface DiplomaticQuarterAllOf
 */
export interface DiplomaticQuarterAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof DiplomaticQuarterAllOf
     */
    buildings?: Array<DiplomaticQuarterAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum DiplomaticQuarterAllOfBuildingsEnum {
    Consulate = 'consulate',
    Chancery = 'chancery'
}

/**
 * 
 * @export
 * @interface District
 */
export interface District {
    /**
     * 
     * @type {string}
     * @memberof District
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof District
     */
    powered?: boolean;
}
/**
 * 
 * @export
 * @interface Encampment
 */
export interface Encampment extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof Encampment
     */
    buildings?: Array<EncampmentBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum EncampmentBuildingsEnum {
    Barracks = 'barracks',
    Stable = 'stable',
    Armory = 'armory',
    MilitaryAcademy = 'military_academy'
}

/**
 * 
 * @export
 * @interface EncampmentAllOf
 */
export interface EncampmentAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof EncampmentAllOf
     */
    buildings?: Array<EncampmentAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum EncampmentAllOfBuildingsEnum {
    Barracks = 'barracks',
    Stable = 'stable',
    Armory = 'armory',
    MilitaryAcademy = 'military_academy'
}

/**
 * 
 * @export
 * @interface EntertainmentComplex
 */
export interface EntertainmentComplex extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof EntertainmentComplex
     */
    buildings?: Array<EntertainmentComplexBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum EntertainmentComplexBuildingsEnum {
    Arena = 'arena',
    Zoo = 'zoo',
    Stadium = 'stadium'
}

/**
 * 
 * @export
 * @interface EntertainmentComplexAllOf
 */
export interface EntertainmentComplexAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof EntertainmentComplexAllOf
     */
    buildings?: Array<EntertainmentComplexAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum EntertainmentComplexAllOfBuildingsEnum {
    Arena = 'arena',
    Zoo = 'zoo',
    Stadium = 'stadium'
}

/**
 * 
 * @export
 * @interface Feature
 */
export interface Feature {
    /**
     * 
     * @type {FeatureType}
     * @memberof Feature
     */
    name: FeatureType;
    /**
     * 
     * @type {boolean}
     * @memberof Feature
     */
    river?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum FeatureType {
    Woods = 'woods',
    Rainforest = 'rainforest',
    Marsh = 'marsh',
    Floodplains = 'floodplains',
    Oasis = 'oasis',
    Mountain = 'mountain',
    Cliffs = 'cliffs',
    Reef = 'reef',
    Ice = 'ice',
    Cataract = 'cataract',
    Volcano = 'volcano',
    VolcanicSoil = 'volcanic_soil',
    Geothermal = 'geothermal'
}

/**
 * 
 * @export
 * @interface GovernmentPlaza
 */
export interface GovernmentPlaza extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof GovernmentPlaza
     */
    buildings?: Array<GovernmentPlazaBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum GovernmentPlazaBuildingsEnum {
    AncestralHall = 'ancestral_hall',
    AudienceChamber = 'audience_chamber',
    WarlordsThrone = 'warlords_throne',
    ForeignMinistry = 'foreign_ministry',
    GrandMastersChapel = 'grand_masters_chapel',
    IntelligenceAgency = 'intelligence_agency',
    QueensBibliotheque = 'queens_bibliotheque',
    NationalHistoryMuseum = 'national_history_museum',
    RoyalSociety = 'royal_society',
    WarDepartment = 'war_department'
}

/**
 * 
 * @export
 * @interface GovernmentPlazaAllOf
 */
export interface GovernmentPlazaAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof GovernmentPlazaAllOf
     */
    buildings?: Array<GovernmentPlazaAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum GovernmentPlazaAllOfBuildingsEnum {
    AncestralHall = 'ancestral_hall',
    AudienceChamber = 'audience_chamber',
    WarlordsThrone = 'warlords_throne',
    ForeignMinistry = 'foreign_ministry',
    GrandMastersChapel = 'grand_masters_chapel',
    IntelligenceAgency = 'intelligence_agency',
    QueensBibliotheque = 'queens_bibliotheque',
    NationalHistoryMuseum = 'national_history_museum',
    RoyalSociety = 'royal_society',
    WarDepartment = 'war_department'
}

/**
 * 
 * @export
 * @interface Harbor
 */
export interface Harbor extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof Harbor
     */
    buildings?: Array<HarborBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum HarborBuildingsEnum {
    Lighthouse = 'lighthouse',
    Shipyard = 'shipyard',
    Seaport = 'seaport'
}

/**
 * 
 * @export
 * @interface HarborAllOf
 */
export interface HarborAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof HarborAllOf
     */
    buildings?: Array<HarborAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum HarborAllOfBuildingsEnum {
    Lighthouse = 'lighthouse',
    Shipyard = 'shipyard',
    Seaport = 'seaport'
}

/**
 * 
 * @export
 * @interface HolySite
 */
export interface HolySite extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof HolySite
     */
    buildings?: Array<HolySiteBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum HolySiteBuildingsEnum {
    Shrine = 'shrine',
    Temple = 'temple'
}

/**
 * 
 * @export
 * @interface HolySiteAllOf
 */
export interface HolySiteAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof HolySiteAllOf
     */
    buildings?: Array<HolySiteAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum HolySiteAllOfBuildingsEnum {
    Shrine = 'shrine',
    Temple = 'temple'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum Improvement {
    Farm = 'farm',
    Mine = 'mine',
    Quarry = 'quarry',
    Plantation = 'plantation',
    Camp = 'camp',
    Pasture = 'pasture',
    FishingBoats = 'fishing_boats',
    LumberMill = 'lumber_mill',
    Fort = 'fort',
    Airstrip = 'airstrip',
    SeasideResort = 'seaside_resort',
    GeothermalPlant = 'geothermal_plant',
    WindFarm = 'wind_farm',
    SolarFarm = 'solar_farm',
    OffshoreWindFarm = 'offshore_wind_farm',
    SkiResort = 'ski_resort',
    OilWell = 'oil_well',
    OffshoreOilWell = 'offshore_oil_well',
    MissleSilo = 'missle_silo',
    MountainTunnel = 'mountain_tunnel',
    Railroad = 'railroad',
    Seastead = 'seastead',
    Alcazar = 'alcazar',
    Batey = 'batey',
    CahokiaMounds = 'cahokia_mounds',
    ColossalHeads = 'colossal_heads',
    Mahavihara = 'mahavihara',
    Moai = 'moai',
    Monistary = 'monistary',
    NazcaLine = 'nazca_line',
    TradingDome = 'trading_dome',
    Chateau = 'chateau',
    Chemamull = 'chemamull',
    GolfCourse = 'golf_course',
    GreatWall = 'great_wall',
    Hacienda = 'hacienda',
    IceHockyRink = 'ice_hocky_rink',
    Kampung = 'kampung',
    Kurgan = 'kurgan',
    Mekewap = 'mekewap',
    Mission = 'mission',
    NubianPyramid = 'nubian_pyramid',
    OpenAirMuseum = 'open_air_museum',
    OutbackStation = 'outback_station',
    Pa = 'pa',
    Pairirdaeza = 'pairirdaeza',
    Polder = 'polder',
    QhapaqNan = 'qhapaq_nan',
    RockHewnChurch = 'rock_hewn_church',
    RomanFort = 'roman_fort',
    Sphinx = 'sphinx',
    Stepwell = 'stepwell',
    TerraceFarms = 'terrace_farms',
    Ziggurat = 'ziggurat',
    CityPark = 'city_park',
    Fishery = 'fishery'
}

/**
 * 
 * @export
 * @interface IndustrialZone
 */
export interface IndustrialZone extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof IndustrialZone
     */
    buildings?: Array<IndustrialZoneBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum IndustrialZoneBuildingsEnum {
    Workshop = 'workshop',
    Factory = 'factory',
    CoalPowerPlant = 'coal_power_plant',
    OilPowerPlant = 'oil_power_plant',
    NuclearPowerPlant = 'nuclear_power_plant'
}

/**
 * 
 * @export
 * @interface IndustrialZoneAllOf
 */
export interface IndustrialZoneAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof IndustrialZoneAllOf
     */
    buildings?: Array<IndustrialZoneAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum IndustrialZoneAllOfBuildingsEnum {
    Workshop = 'workshop',
    Factory = 'factory',
    CoalPowerPlant = 'coal_power_plant',
    OilPowerPlant = 'oil_power_plant',
    NuclearPowerPlant = 'nuclear_power_plant'
}

/**
 * 
 * @export
 * @interface Neighborhood
 */
export interface Neighborhood extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof Neighborhood
     */
    buildings?: Array<NeighborhoodBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum NeighborhoodBuildingsEnum {
    FoodMarket = 'food_market',
    ShoppingMall = 'shopping_mall'
}

/**
 * 
 * @export
 * @interface NeighborhoodAllOf
 */
export interface NeighborhoodAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof NeighborhoodAllOf
     */
    buildings?: Array<NeighborhoodAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum NeighborhoodAllOfBuildingsEnum {
    FoodMarket = 'food_market',
    ShoppingMall = 'shopping_mall'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum Resource {
    Bananas = 'bananas',
    Copper = 'copper',
    Cattle = 'cattle',
    Crabs = 'crabs',
    Deer = 'deer',
    Fish = 'fish',
    Maize = 'maize',
    Rice = 'rice',
    Sheep = 'sheep',
    Stone = 'stone',
    Wheat = 'wheat',
    Amber = 'amber',
    Cinnamon = 'cinnamon',
    Citrus = 'citrus',
    Cloves = 'cloves',
    Cocoa = 'cocoa',
    Coffee = 'coffee',
    Cosmetics = 'cosmetics',
    Cotton = 'cotton',
    Dyes = 'dyes',
    Diamonds = 'diamonds',
    Furs = 'furs',
    GoldOre = 'gold_ore',
    Gypsum = 'gypsum',
    Honey = 'honey',
    Insense = 'insense',
    Ivory = 'ivory',
    Jade = 'jade',
    Jeans = 'jeans',
    Marble = 'marble',
    Murcury = 'murcury',
    Olives = 'olives',
    Pearls = 'pearls',
    Perfume = 'perfume',
    Salt = 'salt',
    Silk = 'silk',
    Silver = 'silver',
    Spices = 'spices',
    Sugar = 'sugar',
    Tea = 'tea',
    Tobacco = 'tobacco',
    Toys = 'toys',
    Truffles = 'truffles',
    Turtles = 'turtles',
    Whales = 'whales',
    Wine = 'wine',
    Horses = 'horses',
    Iron = 'iron',
    Niter = 'niter',
    Coal = 'coal',
    Oil = 'oil',
    Aluminum = 'aluminum',
    Uranium = 'uranium'
}

/**
 * 
 * @export
 * @interface Spaceport
 */
export interface Spaceport extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof Spaceport
     */
    buildings?: Array<string>;
}
/**
 * 
 * @export
 * @interface Terrain
 */
export interface Terrain {
    /**
     * 
     * @type {TerrainType}
     * @memberof Terrain
     */
    name: TerrainType;
    /**
     * 
     * @type {boolean}
     * @memberof Terrain
     */
    hill?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum TerrainType {
    Grassland = 'grassland',
    Plains = 'plains',
    Desert = 'desert',
    Tundra = 'tundra',
    Snow = 'snow',
    Coast = 'coast',
    Lake = 'lake',
    Ocean = 'ocean'
}

/**
 * 
 * @export
 * @interface TheaterSquare
 */
export interface TheaterSquare extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof TheaterSquare
     */
    buildings?: Array<TheaterSquareBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum TheaterSquareBuildingsEnum {
    Amphitheater = 'amphitheater',
    ArtMuseum = 'art_museum',
    ArchaeologicalMuseum = 'archaeological_museum',
    BroadcastCenter = 'broadcast_center'
}

/**
 * 
 * @export
 * @interface TheaterSquareAllOf
 */
export interface TheaterSquareAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof TheaterSquareAllOf
     */
    buildings?: Array<TheaterSquareAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum TheaterSquareAllOfBuildingsEnum {
    Amphitheater = 'amphitheater',
    ArtMuseum = 'art_museum',
    ArchaeologicalMuseum = 'archaeological_museum',
    BroadcastCenter = 'broadcast_center'
}

/**
 * 
 * @export
 * @interface Tile
 */
export interface Tile {
    /**
     * 
     * @type {Terrain}
     * @memberof Tile
     */
    terrain?: Terrain;
    /**
     * 
     * @type {Feature}
     * @memberof Tile
     */
    feature?: Feature;
    /**
     * 
     * @type {Resource}
     * @memberof Tile
     */
    resource?: Resource;
    /**
     * 
     * @type {Improvement}
     * @memberof Tile
     */
    improvement?: Improvement;
    /**
     * 
     * @type {CityCenter | Campus | TheaterSquare | HolySite | Encampment | CommercialHub | Harbor | IndustrialZone | EntertainmentComplex | WaterPark | Aqueduct | Neighborhood | Canal | Dam | Aerodome | Spaceport | GovernmentPlaza | DiplomaticQuarter}
     * @memberof Tile
     */
    district?: CityCenter | Campus | TheaterSquare | HolySite | Encampment | CommercialHub | Harbor | IndustrialZone | EntertainmentComplex | WaterPark | Aqueduct | Neighborhood | Canal | Dam | Aerodome | Spaceport | GovernmentPlaza | DiplomaticQuarter;
}
/**
 * 
 * @export
 * @interface WaterPark
 */
export interface WaterPark extends District {
    /**
     * 
     * @type {Array<string>}
     * @memberof WaterPark
     */
    buildings?: Array<WaterParkBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum WaterParkBuildingsEnum {
    FerrisWheel = 'ferris_wheel',
    Aquarium = 'aquarium',
    AquaticsCenter = 'aquatics_center'
}

/**
 * 
 * @export
 * @interface WaterParkAllOf
 */
export interface WaterParkAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof WaterParkAllOf
     */
    buildings?: Array<WaterParkAllOfBuildingsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum WaterParkAllOfBuildingsEnum {
    FerrisWheel = 'ferris_wheel',
    Aquarium = 'aquarium',
    AquaticsCenter = 'aquatics_center'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the optimal city layout
         * @param {string} cityID uuid for the city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityPlan: async (cityID: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cityID' is not null or undefined
            if (cityID === null || cityID === undefined) {
                throw new RequiredError('cityID','Required parameter cityID was null or undefined when calling getCityPlan.');
            }
            const localVarPath = `/city_plan`
                .replace(`{${"cityID"}}`, encodeURIComponent(String(cityID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a city
         * @param {City} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCityPlan: async (city: City, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'city' is not null or undefined
            if (city === null || city === undefined) {
                throw new RequiredError('city','Required parameter city was null or undefined when calling updateCityPlan.');
            }
            const localVarPath = `/city_plan`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof city !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(city !== undefined ? city : {}) : (city || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the optimal city layout
         * @param {string} cityID uuid for the city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCityPlan(cityID: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<City>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCityPlan(cityID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a city
         * @param {City} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCityPlan(city: City, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<City>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateCityPlan(city, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns the optimal city layout
         * @param {string} cityID uuid for the city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityPlan(cityID: string, options?: any): AxiosPromise<City> {
            return DefaultApiFp(configuration).getCityPlan(cityID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a city
         * @param {City} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCityPlan(city: City, options?: any): AxiosPromise<City> {
            return DefaultApiFp(configuration).updateCityPlan(city, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Returns the optimal city layout
     * @param {string} cityID uuid for the city
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCityPlan(cityID: string, options?: any) {
        return DefaultApiFp(this.configuration).getCityPlan(cityID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a city
     * @param {City} city 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCityPlan(city: City, options?: any) {
        return DefaultApiFp(this.configuration).updateCityPlan(city, options).then((request) => request(this.axios, this.basePath));
    }

}


